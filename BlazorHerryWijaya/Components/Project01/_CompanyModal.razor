@using BlazorHerryWijaya.Repository.IRepository
@using MudBlazor
@inject IRepositoryProject01 _project01Repository
@inject ISnackbar Snackbar

@inject IJSRuntime JS
<MudDialog>
    <DialogContent>
        @if (Company is null)
        {
            <MudProgressCircular Indeterminate="true" />
        }
        else
        {
            <h4>@Company.Name</h4>

            
                  <MudTable Items="CompanyInventories" Bordered="true" Striped="true">
                <HeaderContent>
                    <MudTh>Product</MudTh>
                    <MudTh>Stock</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.ProductName</MudTd>
                    <MudTd>@context.StockQuantity</MudTd>
                </RowTemplate>
                <NoRecordsContent>
        @if (CompanyInventories == null || !CompanyInventories.Any())
        {
            <MudTr>
                <MudTd ColSpan="2" Class="text-center">
                    No inventory in this company
                </MudTd>
            </MudTr>
        }
    </NoRecordsContent>
            </MudTable>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="DownloadJson">
    Download JSON
</MudButton>
          
            
        }
        <MudStack Spacing="2" Class="mt-4">
            <MudSelect T="ProductDto" @bind-Value="selectedProduct" Label="Select Product" Dense="true">
                @foreach (var product in Products)
                {
                    <MudSelectItem T="ProductDto" Value="product">@product.Name</MudSelectItem>
                }
            </MudSelect>

            <MudNumericField @bind-Value="stockQuantity" Label="Stock Quantity" Min="0" Immediate="true" />

            <MudButton Variant="Variant.Filled" Color="Color.Primary"
                       OnClick="AddInventory"
                       Disabled="@(selectedProduct == null)">
                Add Inventory
            </MudButton>
        </MudStack>
    </DialogContent>

    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Close">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private async Task DownloadJson()
    {
        // Example data (you could fetch from DB, DTOs, etc.)
        var company = Company;

        // 1. Serialize to JSON
        var json = System.Text.Json.JsonSerializer.Serialize(company,
            new System.Text.Json.JsonSerializerOptions { WriteIndented = true });

        // 2. Convert JSON into a base64 data URI
        var bytes = System.Text.Encoding.UTF8.GetBytes(json);
        var base64 = Convert.ToBase64String(bytes);
        var url = $"data:application/json;base64,{base64}";

        // 3. Trigger browser download
        await JS.InvokeVoidAsync("downloadFileFromUrl", "company.json", url);
    }
    private async Task AddInventory()
    {
        if (Company == null)
            return; // or show Snackbar warning
        if (selectedProduct != null && stockQuantity > 0)
        {


            var addInventory = new CompanyInventoryDtoSave
            {
                ProductId=selectedProduct.Id,
                StockQuantity=stockQuantity,
                CompanyId = CompanyId
            };
            await _project01Repository.AddProductToInventory(addInventory);

            CompanyInventories.Add(new CompanyInventoryDto
            {
               
                ProductId = selectedProduct.Id,
                ProductName = selectedProduct.Name ,   // important so Product.Name displays immediately
                // Product = selectedProduct,   // important so Product.Name displays immediately
                StockQuantity = stockQuantity,
                
            });
            StateHasChanged();
            Snackbar.Add($"New Inventory {selectedProduct.Name} has been successfully created", Severity.Success);
            // Reset inputs
            selectedProduct = null;
            stockQuantity = 0;
        }
    }
    private int stockQuantity;


    [Parameter]
    public List<ProductDto> Products { get; set; } = new(); // pass products from parent

    private ProductDto? selectedProduct;

    [CascadingParameter]
    IMudDialogInstance MudDialog { get; set; } = default!;


    public CompanyDto? Company { get; set; } = default!;

    private void Close() => MudDialog.Close();

    [Parameter] 
    public int CompanyId { get; set; }

    public List<CompanyInventoryDto> CompanyInventories { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        Products = await _project01Repository.GetAllProduct();
        Company = await _project01Repository.GetCompanyById(CompanyId);
        CompanyInventories = await _project01Repository.GetInventoryByCompanyId(CompanyId);
    }

}
