@using BlazorHerryWijaya.Repository.IRepository
@using MudBlazor
@inject IJSRuntime JS
@inject IRepositoryProject01 _project01Repository
@inject ISnackbar Snackbar

<MudStack Spacing="2">
<MudButton Variant="Variant.Outlined"
           Size="Size.Small"
           OnClick="CreateCompany">
    Create New Company
</MudButton>
<MudButton Variant="Variant.Outlined"
           Size="Size.Small"
           OnClick="CreateProduct">
    Create New Product
</MudButton>
<MudTextField @bind-Value="searchString"
              Placeholder="Search Company..."
              Adornment="Adornment.Start"
              AdornmentIcon="@Icons.Material.Filled.Search" />
<MudTextField @bind-Value="productSearch"
              Placeholder="Search Product..."
              Adornment="Adornment.Start"
              AdornmentIcon="@Icons.Material.Filled.Search" />
</MudStack>
<MudTable Items="Companies.Where(c => FilterFunc(c))" Hover="true" Bordered="true" Striped="true">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Inventory Count</MudTh>
        <MudTh>Action</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Inventory">@context.Inventories.Count()</MudTd>
        <MudTd >
            <MudButton Variant="Variant.Outlined"
                       Size="Size.Small"
                       OnClick="() => ShowDialog(context)" >
                Inspect
            </MudButton>
        </MudTd>

    </RowTemplate>
</MudTable>
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="DownloadJson">
    Download JSON
</MudButton>
@code {
    private async Task DownloadJson()
    {
        // Example data (you could fetch from DB, DTOs, etc.)
        var companies = Companies;

        // 1. Serialize to JSON
        var json = System.Text.Json.JsonSerializer.Serialize(companies,
            new System.Text.Json.JsonSerializerOptions { WriteIndented = true });

        // 2. Convert JSON into a base64 data URI
        var bytes = System.Text.Encoding.UTF8.GetBytes(json);
        var base64 = Convert.ToBase64String(bytes);
        var url = $"data:application/json;base64,{base64}";

        // 3. Trigger browser download
        await JS.InvokeVoidAsync("downloadFileFromUrl", "company.json", url);
    }
    [Inject] 
    IDialogService DialogService { get; set; } = default!;

    private async Task CreateCompany()
    {
        var parameters = new DialogParameters
        {
            // You can pass parameters if needed, e.g., default values
            ["Company"] = new CompanyDtoSave()
        };

        var dialog = await DialogService.ShowAsync<_CreateCompany>(
            "Create New Company",
            parameters
        );

        var result = await dialog.Result;

        if (!result.Canceled && result.Data is CompanyDtoSave newCompany)
        {
            // Add new company to your list or save to DB
            //   Companies = Companies.Append(newCompany);
            var created = new CompanyDto
            {

                Name=newCompany.Name
            };
            Companies.Add(created);
            StateHasChanged();
            Snackbar.Add($"New Company {newCompany.Name} has been successfully created", Severity.Success);

        }
    }
    private async Task CreateProduct()
    {
        var parameters = new DialogParameters
        {
            // You can pass parameters if needed, e.g., default values
            ["Product"] = new ProductDtoSave()
        };

        var dialog = await DialogService.ShowAsync<_CreateProduct>(
            "Create New Product",
            parameters
        );

        var result = await dialog.Result;

        if (!result.Canceled && result.Data is ProductDtoSave newProduct)
        {
            // Add new company to your list or save to DB
            //   Companies = Companies.Append(newCompany);
           // Companies.Add(newCompany);
            // var created = new ProductDto
            // {

            //     Name = newProduct.Name
            // };

            StateHasChanged();
            Snackbar.Add($"New Product {newProduct.Name} has been successfully created", Severity.Success);

        }
    }


    private async Task ShowDialog(CompanyDto company)
    {
        var parameters = new DialogParameters
        {
           // ["Products"]=
            ["CompanyId"] = company.Id
        };

        var dialog = await DialogService.ShowAsync<_CompanyModal>(
            "Company Inventory Details",
            parameters
        );

        await dialog.Result;
    }

    private string searchString = "";
    private string productSearch = "";
    private bool FilterFunc(CompanyDto company)
    {
        // Filter by company name
        bool matchCompany = string.IsNullOrWhiteSpace(searchString) ||
                            company.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase);

        // Filter by product name inside inventories
        bool matchProduct = string.IsNullOrWhiteSpace(productSearch) ||
                            company.Inventories.Any(ci =>
                                ci.ProductName != null &&
                                ci.ProductName.Contains(productSearch, StringComparison.OrdinalIgnoreCase));

        return matchCompany && matchProduct;
    }



    public List<CompanyDto> Companies { get; set; } = new List<CompanyDto>();



    protected override async Task OnInitializedAsync()
    {
        //return base.OnInitializedAsync();
        await LoadCompanies();
      //  await JS.InvokeVoidAsync("DataTableInterop.init", "productTable");
    }
    private async Task LoadCompanies()
    {
        Companies = await _project01Repository.GetAllCompany();

    }


}
